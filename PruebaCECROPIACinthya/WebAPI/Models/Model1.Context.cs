//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAPI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PruebaCECROPIACinthyaEntities : DbContext
    {
        public PruebaCECROPIACinthyaEntities()
            : base("name=PruebaCECROPIACinthyaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BloodType> BloodTypes { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
    
        public virtual int AddPatient(string firstName, string lastName, string iD, Nullable<System.DateTime> dateBirth, Nullable<int> nationality, string diseases, string phoneNumber, Nullable<int> bloodType)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var dateBirthParameter = dateBirth.HasValue ?
                new ObjectParameter("DateBirth", dateBirth) :
                new ObjectParameter("DateBirth", typeof(System.DateTime));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            var diseasesParameter = diseases != null ?
                new ObjectParameter("Diseases", diseases) :
                new ObjectParameter("Diseases", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var bloodTypeParameter = bloodType.HasValue ?
                new ObjectParameter("BloodType", bloodType) :
                new ObjectParameter("BloodType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPatient", firstNameParameter, lastNameParameter, iDParameter, dateBirthParameter, nationalityParameter, diseasesParameter, phoneNumberParameter, bloodTypeParameter);
        }
    
        public virtual int DeletePatient(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePatient", iDParameter);
        }
    
        public virtual ObjectResult<SearchPatient_Result> SearchPatient(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchPatient_Result>("SearchPatient", iDParameter);
        }
    
        public virtual int UpdatePatient(string firstName, string lastName, string iD, Nullable<System.DateTime> dateBirth, Nullable<int> nationality, string diseases, string phoneNumber, Nullable<int> bloodType)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var dateBirthParameter = dateBirth.HasValue ?
                new ObjectParameter("DateBirth", dateBirth) :
                new ObjectParameter("DateBirth", typeof(System.DateTime));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            var diseasesParameter = diseases != null ?
                new ObjectParameter("Diseases", diseases) :
                new ObjectParameter("Diseases", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var bloodTypeParameter = bloodType.HasValue ?
                new ObjectParameter("BloodType", bloodType) :
                new ObjectParameter("BloodType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatient", firstNameParameter, lastNameParameter, iDParameter, dateBirthParameter, nationalityParameter, diseasesParameter, phoneNumberParameter, bloodTypeParameter);
        }
    
        public virtual int AddPatient1(string firstName, string lastName, string iD, Nullable<System.DateTime> dateBirth, Nullable<int> nationality, string diseases, string phoneNumber, Nullable<int> bloodType)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var dateBirthParameter = dateBirth.HasValue ?
                new ObjectParameter("DateBirth", dateBirth) :
                new ObjectParameter("DateBirth", typeof(System.DateTime));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            var diseasesParameter = diseases != null ?
                new ObjectParameter("Diseases", diseases) :
                new ObjectParameter("Diseases", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var bloodTypeParameter = bloodType.HasValue ?
                new ObjectParameter("BloodType", bloodType) :
                new ObjectParameter("BloodType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPatient1", firstNameParameter, lastNameParameter, iDParameter, dateBirthParameter, nationalityParameter, diseasesParameter, phoneNumberParameter, bloodTypeParameter);
        }
    
        public virtual int DeletePatient1(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePatient1", iDParameter);
        }
    
        public virtual int SearchPatient1(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchPatient1", iDParameter);
        }
    
        public virtual int UpdatePatient1(string firstName, string lastName, string iD, Nullable<System.DateTime> dateBirth, Nullable<int> nationality, string diseases, string phoneNumber, Nullable<int> bloodType)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var dateBirthParameter = dateBirth.HasValue ?
                new ObjectParameter("DateBirth", dateBirth) :
                new ObjectParameter("DateBirth", typeof(System.DateTime));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            var diseasesParameter = diseases != null ?
                new ObjectParameter("Diseases", diseases) :
                new ObjectParameter("Diseases", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var bloodTypeParameter = bloodType.HasValue ?
                new ObjectParameter("BloodType", bloodType) :
                new ObjectParameter("BloodType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatient1", firstNameParameter, lastNameParameter, iDParameter, dateBirthParameter, nationalityParameter, diseasesParameter, phoneNumberParameter, bloodTypeParameter);
        }
    }
}
